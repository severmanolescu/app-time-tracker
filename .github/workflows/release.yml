name: Release Build

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v0.1.0)'
        required: false

permissions:
  contents: write

jobs:
  build-release:
    name: Build Release for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        CI: true
        CSC_IDENTITY_AUTO_DISCOVERY: false

    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: prism-windows-installer
        path: |
          dist/*.exe
          dist/*.zip
        retention-days: 30

    - name: Upload Linux artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: prism-linux-installer
        path: |
          dist/*.AppImage
          dist/*.deb
        retention-days: 30

    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: prism-macos-installer
        path: |
          dist/*.dmg
          dist/*.zip
        retention-days: 30

    # Automatically attach to release if triggered by release event
    - name: Upload to GitHub Release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/*.exe
          dist/*.zip
          dist/*.AppImage
          dist/*.deb
          dist/*.dmg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux-arm64:
    name: Build Linux ARM64 Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up QEMU for ARM64
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build in ARM64 container
      run: |
        docker run --rm --platform linux/arm64 \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          -e CI=true \
          -e CSC_IDENTITY_AUTO_DISCOVERY=false \
          -e npm_config_arch=arm64 \
          -e npm_config_target_arch=arm64 \
          node:20 \
          bash -c "
            apt-get update && \
            apt-get install -y build-essential python3 && \
            npm ci && \
            npx electron-builder --linux --arm64
          "

    - name: Upload Linux ARM64 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: prism-linux-arm64-installer
        path: |
          dist/*.AppImage
          dist/*.deb
        retention-days: 30

    - name: Upload ARM64 to GitHub Release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/*.AppImage
          dist/*.deb
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
